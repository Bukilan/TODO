{"version":3,"sources":["Components/ModalWindow/index.js","Components/ModalWindow/ModalWindow.tsx","Components/TagsCloud/TagsCloudItem.tsx","helpers/utils.ts","Components/NoteModal/index.js","Components/NoteModal/NoteModal.tsx","Components/TagsCloud/TagsCloudDisplay.tsx","Components/NotesList/NotesListItem.tsx","Components/NotesList/NotesList.tsx","Components/SearchField/index.js","Components/SearchField/SearchField.tsx","Components/TagsCloud/index.js","Components/TagsCloud/TagsCloud.tsx","App.tsx","helpers/mocks.ts","models/index.ts","models/notes.ts","models/tags.ts","store.ts","index.tsx"],"names":["ModalWindow","isOpen","handleClose","children","Modal","open","onClose","TagsCloudItem","name","isActive","onElemClick","onDeleteClick","id","className","Button","onClick","variant","color","size","IconButton","aria-label","delay","ms","Promise","resolve","setTimeout","getNoteIndexById","state","findIndex","el","editNoteArrayMutator","payload","type","index","newList","isPinned","deleteNoteArrayMutator","slice","addNoteArrayMutator","newId","newArr","deleteTagFromNoteArrayMutator","map","item","noteTags","deleteTagArrayMutator","addTagToNoteArrayMutator","addTagArrayMutator","filterNotesArrayMutator","tags","searchQuery","searchedNotes","filter","title","toLowerCase","indexOf","description","tagsNotes","note","find","noteTag","tag","push","concatNotes","result","forEach","length","getTagIndexById","changeTagStatus","createNewTagId","Math","max","NoteModal","initTitle","initDescription","initTags","isEditNote","dispatch","useDispatch","tagsList","useSelector","useState","setTitle","setDescription","isBePinned","setIsBePinned","tagsArray","setTagsArray","isTagsChanged","setIsTagsChanged","useEffect","handleTagClick","prev","onChange","e","target","value","placeholder","key","Switch","checked","inputProps","disabled","notes","editNote","pinNote","unPinNote","addNote","TagsCloudDisplay","Chip","label","NotesListItem","currentNote","isEditNoteOpen","setIsEditNoteOpen","changeEditNoteOpen","Paper","fontSize","deleteNote","NotesList","openAddModal","fullWidth","Item","SearchField","onQueryChange","TextField","TagsCloud","newAddName","onAddNameSubmit","onAddNameChange","onTagClick","onTagDelete","App","filteredNotesList","pinnedNotesList","setNewAddName","isAddNoteOpen","setIsAddNoteOpen","setSearchQuery","changeAddNoteOpen","load","Grid","container","justify","lg","sm","xs","filterNotes","activeTags","addTag","toUpperCase","addTagToNotes","changeStatus","deleteTag","deleteTagFromNotes","initialNotesState","initialTags","initialTag","initialNote","models","createModel","notesList","notPinnedList","reducers","successLoadNotesList","successAddLoadNote","createNewNoteId","successEditNote","successDeleteNote","successPinNote","pinnedNoteIndex","successUnPinNote","successDeleteTagFromNotes","successAddTagToNotes","successFilterNotes","effects","successLoadTagsList","successChangeTagStatus","successDeleteTag","successAddTag","store","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.163954d4.chunk.js","sourcesContent":["import ModalWindow from \"./ModalWindow\";\r\n\r\nexport default ModalWindow","import React, { ReactElement } from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport './ModalWindow.scss';\r\n\r\ntype Props = {\r\n    isOpen: boolean,\r\n    handleClose: () => void\r\n    children: ReactElement,\r\n}\r\n\r\nconst ModalWindow = ({ isOpen, handleClose, children }: Props): ReactElement => {\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n        >\r\n            {children}\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ModalWindow;\r\n","import React, { ReactElement } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport './TagsCloudItem.scss';\r\n\r\ntype Props = {\r\n    name: string,\r\n    isActive: boolean,\r\n    id: number,\r\n    onElemClick: (id: number) => () => void,\r\n    onDeleteClick?: (id: number) => () => void\r\n}\r\n\r\nconst TagsCloudItem = ({ name, isActive, onElemClick, onDeleteClick, id }: Props): ReactElement | null => {\r\n    if (!name) return null\r\n    return (\r\n        <div className='TagsCloudItem-container'>\r\n            <Button className='TagsCloudItem-button' onClick={onElemClick(id)} variant={!isActive ? 'outlined' : 'contained'} color={!isActive ? 'inherit' : 'primary'} size='small'>\r\n                {name}\r\n            </Button>\r\n            {onDeleteClick ? (\r\n                <IconButton color='secondary' onClick={onDeleteClick(id)} className='TagsCloudItem-delete' aria-label=\"delete\">\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TagsCloudItem;\r\n","import { ArrayNotesType, NoteType } from \"../Types/models/nodes\";\nimport { AddNoteType } from \"../Types/models/addNote\";\nimport { ArrayTagsType } from \"../Types/models/tag\";\n\ntype ArrayType = 'NotesList' | 'filteredNotesList' | 'pinnedNotesList' | 'notPinnedList'\n\nexport const delay = (ms: number) =>\n\tnew Promise(resolve => setTimeout(resolve, ms))\n\nexport const getNoteIndexById = (state: ArrayNotesType, id: number): number => {\n    return state.findIndex((el) => el.id === id);\n}\n\nexport const editNoteArrayMutator = (state: ArrayNotesType, payload: NoteType, type: ArrayType): ArrayNotesType => {\n    const index = getNoteIndexById(state, payload.id)\n    const newList = [...state]\n    if (index >= 0) {\n        newList[index] = {\n            ...payload\n        }\n    }\n\n    switch (type) {\n        case \"NotesList\":\n            return newList\n        case \"filteredNotesList\":\n            if (payload.isPinned) return state\n            return newList\n        case \"notPinnedList\":\n            if (payload.isPinned) return state\n            return newList\n        case \"pinnedNotesList\":\n            if (!payload.isPinned) return state\n            return newList\n        default:\n            return state\n    }\n}\n\nexport const deleteNoteArrayMutator = (state: ArrayNotesType, id: number): ArrayNotesType => {\n    const index = getNoteIndexById(state, id)\n    if (index >= 0) {\n        return [...state.slice(0, index), ...state.slice(index + 1)]\n    } else return  state\n}\n\n\nexport const addNoteArrayMutator = (state: ArrayNotesType, payload: AddNoteType, newId: number, type: ArrayType): ArrayNotesType => {\n    const newArr = [\n        ...state,\n        {\n            id: newId,\n            ...payload\n        }\n    ]\n    switch (type) {\n        case \"NotesList\":\n            return newArr\n        case \"filteredNotesList\":\n            if (payload.isPinned) return state\n            return newArr\n        case \"notPinnedList\":\n            if (payload.isPinned) return state\n            return newArr\n        case \"pinnedNotesList\":\n            if (!payload.isPinned) return state\n            return newArr\n        default:\n            return state\n    }\n}\n\nexport const deleteTagFromNoteArrayMutator = (state: ArrayNotesType, payload: number): ArrayNotesType => {\n    return state.map(item => {\n        return {\n            ...item,\n            noteTags: deleteTagArrayMutator(item.noteTags, payload)\n        }\n    })\n}\n\nexport const addTagToNoteArrayMutator = (state: ArrayNotesType, payload: string): ArrayNotesType => {\n    return state.map(item => {\n        return {\n            ...item,\n            noteTags: addTagArrayMutator(item.noteTags, payload)\n        }\n    })\n}\n\nexport const filterNotesArrayMutator = (state: ArrayNotesType, tags: ArrayTagsType, searchQuery: string): ArrayNotesType => {\n    const searchedNotes = state.filter(item => item.title.toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1 || item.description.toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1)\n    const tagsNotes: ArrayNotesType = []\n    state.map(note => {\n        const isFound = note.noteTags.find(noteTag => {\n            return tags.find(tag => noteTag.id === tag.id && noteTag.isActive)\n        })\n       if (isFound) tagsNotes.push(note)\n    })\n\n    const concatNotes = [...searchedNotes, ...tagsNotes]\n\n    const result: ArrayNotesType = []\n    concatNotes.forEach(item => {\n        if (getNoteIndexById(searchedNotes, item.id) !== -1 && getNoteIndexById(tagsNotes, item.id) !== -1 &&  getNoteIndexById(result, item.id) === -1) {\n            result.push(item)\n        }\n    })\n\n    if (!tags.length) {\n        return searchedNotes\n    }\n\n    if (!searchQuery) {\n        return tagsNotes\n    }\n\n    return result\n}\n\nexport const createNewNoteId = (state: ArrayNotesType): number => {\n    return Math.max(...state.map(item => item.id)) + 1\n}\n\nexport const getTagIndexById = (state: ArrayTagsType, id: number): number => {\n    return state.findIndex((el) => el.id === id);\n}\n\nexport const changeTagStatus = (state: ArrayTagsType, id: number): ArrayTagsType => {\n    const index = getTagIndexById(state, id)\n    const newList = [...state]\n    if (index >= 0) {\n        newList[index] = {\n            ...newList[index],\n            isActive: !newList[index].isActive\n        }\n    }\n    return newList\n}\n\nexport const deleteTagArrayMutator = (state: ArrayTagsType, id: number): ArrayTagsType => {\n    const index = getTagIndexById(state, id)\n    if (index >= 0) {\n        return [...state.slice(0, index), ...state.slice(index + 1)]\n    } else return  state\n}\n\nexport const createNewTagId = (state: ArrayTagsType): number => {\n    return Math.max(...state.map(item => item.id)) + 1\n}\n\nexport const addTagArrayMutator = (state: ArrayTagsType, name: string): ArrayTagsType => {\n    return [\n        ...state,\n        {\n            id: createNewTagId(state),\n            name,\n            isActive: false,\n        }\n    ]\n}","import NoteModal from './NoteModal'\r\n\r\nexport default NoteModal","import React, { ReactElement, ChangeEvent, useState, useEffect } from 'react';\r\nimport ModalWindow from \"../ModalWindow\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Switch from '@material-ui/core/Switch';\r\nimport TagsCloudItem from \"../TagsCloud/TagsCloudItem\";\r\nimport { ArrayTagsType, StateTagsType } from \"../../Types/models/tag\";\r\nimport { RootStateType } from \"../../Types/models/root\";\r\nimport { changeTagStatus } from \"../../helpers/utils\";\r\nimport './NoteModal.scss';\r\n\r\ntype Props = {\r\n    isOpen: boolean,\r\n    handleClose: () => void,\r\n    initTitle?: string,\r\n    initDescription?: string,\r\n    id?: number,\r\n    initTags?: ArrayTagsType,\r\n    isPinned?: boolean,\r\n    isEditNote?: boolean\r\n}\r\n\r\nconst NoteModal = ({ isOpen, handleClose, initTitle = '', initDescription = '', id, initTags = [], isPinned = false, isEditNote = false }: Props): ReactElement => {\r\n    const dispatch = useDispatch();\r\n    const { tagsList }: StateTagsType = useSelector(({ tags }: RootStateType) => tags);\r\n\r\n    const [title, setTitle] = useState<string>(initTitle)\r\n    const [description, setDescription] = useState<string>(initDescription)\r\n    const [isBePinned, setIsBePinned] = useState<boolean>(isPinned)\r\n    const [tagsArray, setTagsArray] = useState<ArrayTagsType>([])\r\n    const [isTagsChanged, setIsTagsChanged] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        if (!initTags.length) {\r\n            setTagsArray(\r\n                tagsList.map(item => {\r\n                    return {\r\n                        id: item.id,\r\n                        isActive: false,\r\n                        name: item.name\r\n                    }\r\n                })\r\n            )\r\n        } else {\r\n            setTagsArray(initTags)\r\n        }\r\n    }, [tagsList, setTagsArray])\r\n\r\n    const handleTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n    const handleDescriptionChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setDescription(e.target.value)\r\n    }\r\n\r\n    const handleBePinnedChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setIsBePinned(prev => !prev)\r\n    }\r\n\r\n    const handleCreate = () => {\r\n        if (!title) {\r\n            return\r\n        }\r\n        dispatch.notes.addNote({\r\n            title,\r\n            description,\r\n            isPinned: isBePinned,\r\n            noteTags: tagsArray\r\n        })\r\n\r\n        setTitle('')\r\n        setDescription('')\r\n        setIsBePinned(false)\r\n\r\n        handleClose()\r\n    }\r\n\r\n    const handleEdit = () => {\r\n        if (title === initTitle && description === initDescription && isBePinned === isPinned && !isTagsChanged) return\r\n\r\n        dispatch.notes.editNote({\r\n            id,\r\n            title,\r\n            description,\r\n            isPinned,\r\n            noteTags: tagsArray\r\n        })\r\n\r\n        if (isBePinned) {\r\n            if (!isPinned) {\r\n                dispatch.notes.pinNote(\r\n                    id\r\n                )\r\n            }\r\n        } else {\r\n            if (isPinned) {\r\n                dispatch.notes.unPinNote(\r\n                    id\r\n                )\r\n            }\r\n        }\r\n\r\n        handleClose()\r\n    }\r\n\r\n    const handleTagClick = (id: number): () => void => (): void => {\r\n        setTagsArray(prev => {\r\n            return changeTagStatus(prev, id)\r\n        })\r\n        setIsTagsChanged(true)\r\n    }\r\n\r\n    return (\r\n        <div className='AddNote-zone'>\r\n            <ModalWindow\r\n                isOpen={isOpen}\r\n                handleClose={handleClose}\r\n            >\r\n                <div className='AddNote-wrapper'>\r\n                    <div className='AddNote-container'>\r\n                        <input onChange={handleTitleChange} value={title} placeholder='Название...' className='AddNote-title AddNote-input' />\r\n                        <TextareaAutosize onChange={handleDescriptionChange} value={description} placeholder='Заметка...' className='AddNote-description AddNote-input' />\r\n                        <div className='AddNote-tags'>\r\n                            {tagsArray.map(item => (\r\n                                <TagsCloudItem key={item.id} name={item.name} id={item.id} isActive={item.isActive} onElemClick={handleTagClick} />\r\n                            ))}\r\n                        </div>\r\n                        <div className='AddNote-controls'>\r\n                            <div className='AddNote-switch'>\r\n                                <Switch\r\n                                    checked={isBePinned}\r\n                                    onChange={handleBePinnedChange}\r\n                                    color=\"primary\"\r\n                                    name='pinCheck'\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                />\r\n                                <div className='AddNote-switch_text'>Закрепить ?</div>\r\n                            </div>\r\n                            {!isEditNote ? (\r\n                                <Button onClick={handleCreate} className='AddNote-button' variant=\"contained\" color={title ? \"primary\" : \"secondary\" }>\r\n                                    Создать заметку !\r\n                                </Button>\r\n                            ) : (\r\n                                <Button disabled={title === initTitle && description === initDescription && isBePinned === isPinned && !isTagsChanged} onClick={handleEdit} className='AddNote-button' variant=\"contained\" color=\"primary\">\r\n                                    Сохранить заметку !\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ModalWindow>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoteModal;\r\n","import React, { ReactElement } from 'react';\r\nimport './TagsCloudDisplay.scss';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { ArrayTagsType } from \"../../Types/models/tag\";\r\n\r\ntype Props = {\r\n    tags: ArrayTagsType\r\n}\r\n\r\nconst TagsCloudDisplay = ({ tags }: Props): ReactElement => {\r\n    return (\r\n        <div className='TagsCloudDisplay-container'>\r\n            {tags.filter(item => item.isActive).map(item => (\r\n                <div key={item.id} className='TagsCloudDisplay-item_container'>\r\n                    <Chip color=\"primary\" label={item.name} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TagsCloudDisplay;\r\n","import React, { ReactElement, useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport BookmarkIcon from '@material-ui/icons/Bookmark';\r\nimport NoteModal from '../NoteModal';\r\nimport { useDispatch } from \"react-redux\";\r\nimport TagsCloudDisplay from \"../TagsCloud/TagsCloudDisplay\";\r\nimport { NoteType } from \"../../Types/models/nodes\";\r\nimport './NotesListItem.scss';\r\n\r\ntype Props = {\r\n    currentNote: NoteType\r\n}\r\n\r\nconst NotesListItem = ({ currentNote }: Props): ReactElement | null => {\r\n    const {id, title, description, isPinned, noteTags} = currentNote\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [isEditNoteOpen, setIsEditNoteOpen] = useState<boolean>(false)\r\n\r\n    if (!title) return null\r\n\r\n    const changeEditNoteOpen = (): void => {\r\n        setIsEditNoteOpen(prev => !prev)\r\n    }\r\n\r\n    const deleteNote = (): void => {\r\n        dispatch.notes.deleteNote(id)\r\n    }\r\n\r\n    const pinNote = (): void => {\r\n        dispatch.notes.pinNote(id)\r\n    }\r\n\r\n    const unPinNote = (): void => {\r\n        dispatch.notes.unPinNote(id)\r\n    }\r\n\r\n    return (\r\n        <div className='NotesListItem-container'>\r\n            <Paper className='NotesListItem-note'>\r\n                <IconButton onClick={changeEditNoteOpen} className='NotesListItem-edit' aria-label=\"delete\">\r\n                    <EditIcon fontSize=\"small\" />\r\n                </IconButton>\r\n                <IconButton color='secondary' onClick={deleteNote} className='NotesListItem-delete' aria-label=\"delete\">\r\n                    <DeleteIcon fontSize=\"small\" />\r\n                </IconButton>\r\n                <IconButton color={!isPinned ? 'inherit' :  'primary'} onClick={!isPinned ? pinNote : unPinNote} className='NotesListItem-pin' aria-label=\"delete\">\r\n                    <BookmarkIcon fontSize=\"small\" />\r\n                </IconButton>\r\n                <h3 className='NotesListItem-title'>{title}</h3>\r\n                <div className='NotesListItem-description'>{description}</div>\r\n                {noteTags && noteTags.length ? (\r\n                    <TagsCloudDisplay tags={noteTags} />\r\n                ) : null}\r\n            </Paper>\r\n            <NoteModal initTitle={title} initDescription={description} id={id} isPinned={isPinned} initTags={noteTags} isEditNote isOpen={isEditNoteOpen} handleClose={changeEditNoteOpen} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotesListItem;\r\n","import React, { ReactElement, ReactNode } from 'react';\r\nimport NotesListItem from \"./NotesListItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport './NotesList.scss';\r\n\r\ntype Props = {\r\n    children: ReactNode,\r\n    openAddModal: () => void;\r\n}\r\n\r\nconst NotesList = ({ children, openAddModal }: Props): ReactElement => {\r\n    return (\r\n        <div className='NotesList-container'>\r\n            <Button fullWidth className='NotesList-addNoteButton' variant=\"contained\" color=\"primary\" type='button' onClick={openAddModal}>\r\n                Добавить заметку\r\n            </Button>\r\n            {children}\r\n        </div>  \r\n    );\r\n}\r\n\r\nNotesList.Item = NotesListItem\r\nexport default NotesList;\r\n","import SearchField from './SearchField'\r\n\r\nexport default SearchField","import React, { ReactElement, ChangeEvent } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport './SearchField.scss';\r\n\r\ntype Props = {\r\n    searchQuery: string\r\n    onQueryChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchField = ({ searchQuery, onQueryChange }: Props): ReactElement => {\r\n    return (\r\n        <div className='SearchField-container'>\r\n            <SearchIcon color='inherit' className='SearchField-icon' />\r\n            <TextField label=\"Поиск\" placeholder=\"Найти заметку\" value={searchQuery} onChange={onQueryChange} className='SearchField' id=\"standard-search\" type=\"search\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchField;\r\n","import TagsCloud from './TagsCloud'\r\n\r\nexport default TagsCloud","import React, {ReactElement, ChangeEvent} from 'react';\r\nimport TagsCloudItem from \"./TagsCloudItem\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport { ArrayTagsType } from \"../../Types/models/tag\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport './TagsCloud.scss';\r\n\r\ntype Props = {\r\n    tagsList: ArrayTagsType,\r\n    newAddName: string,\r\n    onAddNameSubmit: () => void,\r\n    onAddNameChange: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    onTagDelete: (id: number) => () => void,\r\n    onTagClick: (id: number) => () => void,\r\n}\r\n\r\nconst TagsCloud = ({ tagsList, newAddName, onAddNameSubmit, onAddNameChange, onTagClick, onTagDelete }: Props): ReactElement => {\r\n    return (\r\n        <div className='TagsCloud-container'>\r\n            {tagsList.map(item => (\r\n                <TagsCloudItem key={item.id} name={item.name} id={item.id} isActive={item.isActive} onElemClick={onTagClick} onDeleteClick={onTagDelete} />\r\n            ))}\r\n            <div className='TagsCloud-add_container'>\r\n                <TextField value={newAddName} onChange={onAddNameChange} className='TagsCloud-add' id=\"standard-search\" label=\"Добавить тэг\" type=\"search\" />\r\n                <IconButton color='primary' onClick={onAddNameSubmit} className='TagsCloud-add_button' aria-label=\"delete\">\r\n                    <AddBoxIcon fontSize='large' />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TagsCloud;\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StateNotesType, RootStateType } from \"./Types/models\";\nimport NotesList from \"./Components/NotesList/NotesList\";\nimport NoteModal from \"./Components/NoteModal\";\nimport SearchField from \"./Components/SearchField\";\nimport TagsCloud from './Components/TagsCloud'\nimport { StateTagsType } from \"./Types/models/tag\";\nimport { changeTagStatus } from \"./helpers/utils\";\nimport Grid from \"@material-ui/core/Grid\";\nimport './App.scss';\n\nconst App = () => {\n    const dispatch = useDispatch()\n    const { filteredNotesList, pinnedNotesList }: StateNotesType = useSelector(({ notes }: RootStateType) => notes);\n\n    const { tagsList }: StateTagsType = useSelector(({ tags }: RootStateType) => tags);\n\n    const [newAddName, setNewAddName] = useState<string>('')\n\n    const [isAddNoteOpen, setIsAddNoteOpen] = useState<boolean>(false)\n    const [searchQuery, setSearchQuery] = useState<string>('')\n\n    const handleQueryChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setSearchQuery(e.target.value)\n        dispatch.notes.filterNotes({\n            activeTags:  tagsList.filter(item => item.isActive),\n            searchQuery: e.target.value\n        })\n    }\n\n    const changeAddNoteOpen = (): void => {\n        setIsAddNoteOpen(prev => !prev)\n    }\n\n    const handleTagClick = (id: number): () => void => (): void => {\n        dispatch.tags.changeStatus(id)\n        const currentTag = tagsList.find(item => item.id === id)\n        if (!currentTag) return\n        dispatch.notes.filterNotes({\n            activeTags:  changeTagStatus(tagsList, id).filter(item => item.isActive),\n            searchQuery: searchQuery\n        })\n    }\n\n    const handleTagDeleteClick = (id: number): () => void => (): void => {\n        dispatch.tags.deleteTag(id)\n        dispatch.notes.deleteTagFromNotes(id)\n        dispatch.notes.filterNotes({\n            activeTags:  tagsList.filter(item => item.isActive),\n            searchQuery: searchQuery\n        })\n    }\n\n    const handleAddTagChangeName = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewAddName(e.target.value)\n    }\n\n    const handleAddTagSubmit = () => {\n        if (newAddName) {\n            dispatch.tags.addTag(newAddName.toUpperCase())\n            dispatch.notes.addTagToNotes(newAddName)\n            setNewAddName('')\n        }\n    }\n\n    useEffect(() => {\n        dispatch.notes.load()\n        dispatch.tags.load()\n    }, [dispatch])\n\n    return (\n        <div className='PageLayout'>\n            <Grid container justify='center'>\n                <Grid item lg={4} sm={8} xs={10}>\n                    <SearchField searchQuery={searchQuery} onQueryChange={handleQueryChange} />\n                    <TagsCloud tagsList={tagsList} newAddName={newAddName} onAddNameChange={handleAddTagChangeName} onAddNameSubmit={handleAddTagSubmit} onTagClick={handleTagClick} onTagDelete={handleTagDeleteClick} />\n                    {filteredNotesList.length ? (\n                        <NotesList openAddModal={changeAddNoteOpen}>\n                            {pinnedNotesList.map((item) => (\n                                <NotesList.Item key={`pinned-${item.id}`} currentNote={item} />\n                            ))}\n                            {filteredNotesList.map((item) => (\n                                <NotesList.Item key={item.id}  currentNote={item} />\n                            ))}\n                        </NotesList>\n                    ) : (\n                        <div className='PageLayout-empty'>\n                            Похоже у вас нет заметок ) Попробуйте добавить новую\n                        </div>\n                    )}\n                </Grid>\n            </Grid>\n            <NoteModal isOpen={isAddNoteOpen} handleClose={changeAddNoteOpen} />\n        </div>\n    );\n}\n\nexport default App;\n","import { ArrayNotesType } from \"../Types/models/nodes\";\r\nimport {ArrayTagsType} from \"../Types/models/tag\";\r\n\r\nexport const initialNotesState: ArrayNotesType = [\r\n    {\r\n        id: 1,\r\n        title: 'Покормить кота',\r\n        description: 'Корм лежит в кладовке',\r\n        isPinned: false,\r\n        noteTags: [\r\n            {\r\n                id: 1,\r\n                name: 'Деньги',\r\n                isActive: false\r\n            },\r\n            {\r\n                id: 2,\r\n                name: 'Документы',\r\n                isActive: false\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: 2,\r\n        title: 'Положить деньги на телефон другу',\r\n        description: 'Номер 88005553535',\r\n        isPinned: false,\r\n        noteTags: [\r\n            {\r\n                id: 1,\r\n                name: 'Деньги',\r\n                isActive: true\r\n            },\r\n            {\r\n                id: 2,\r\n                name: 'Документы',\r\n                isActive: false\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: 3,\r\n        title: 'Подать на налоговый вычет',\r\n        description: 'Посмотреть в инете до какого числа надо подавать. В теории, как и налоги, до декабря',\r\n        isPinned: false,\r\n        noteTags: [\r\n            {\r\n                id: 1,\r\n                name: 'Деньги',\r\n                isActive: true\r\n            },\r\n            {\r\n                id: 2,\r\n                name: 'Документы',\r\n                isActive: true\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: 4,\r\n        title: 'Забрать справку из участка',\r\n        description: 'Пришла справка о несудимости, надо забрать',\r\n        isPinned: true,\r\n        noteTags: [\r\n            {\r\n                id: 1,\r\n                name: 'Деньги',\r\n                isActive: false\r\n            },\r\n            {\r\n                id: 2,\r\n                name: 'Документы',\r\n                isActive: true\r\n            },\r\n        ]\r\n    },\r\n]\r\n\r\nexport const initialTags = [\r\n    {\r\n        id: 1,\r\n        name: 'Деньги',\r\n        isActive: false\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Документы',\r\n        isActive: false\r\n    },\r\n]\r\n\r\nexport const initialTag: ArrayTagsType = [{\r\n    name: '',\r\n    isActive: false,\r\n    id: 1\r\n}]\r\n\r\nexport const initialNote: ArrayNotesType = [{\r\n    id: 1,\r\n    title: '',\r\n    description: '',\r\n    isPinned: false,\r\n    noteTags: initialTag\r\n}]","import { notes } from \"./notes\";\nimport { Models } from \"@rematch/core\";\nimport { tags } from \"./tags\";\n\nexport interface RootModel extends Models<RootModel> {\n  notes: typeof notes;\n  tags: typeof tags;\n}\n\nexport const models: RootModel = { notes: notes, tags: tags };\n","import { createModel } from \"@rematch/core\";\nimport {\n  delay,\n  editNoteArrayMutator,\n  deleteNoteArrayMutator,\n  addNoteArrayMutator,\n  createNewNoteId,\n  deleteTagFromNoteArrayMutator,\n  addTagToNoteArrayMutator,\n  filterNotesArrayMutator,\n} from \"../helpers/utils\";\nimport { initialNote, initialNotesState } from \"../helpers/mocks\";\nimport { RootModel } from \".\";\nimport { ArrayNotesType, StateNotesType, NoteType } from \"../Types/models/nodes\";\nimport { AddNoteType } from \"../Types/models/addNote\";\nimport { ArrayTagsType } from \"../Types/models/tag\";\n\ntype NotesFilterType = {\n  activeTags: ArrayTagsType\n  searchQuery: string\n}\n\nexport const notes: any = createModel<RootModel>()({\n  state: {\n    notesList: initialNote,\n    filteredNotesList: initialNote,\n    pinnedNotesList: initialNote,\n    notPinnedList: initialNote,\n  },\n  reducers: {\n    successLoadNotesList(state: StateNotesType, payload: ArrayNotesType): StateNotesType {\n      return {\n        notesList: payload,\n        notPinnedList: payload.filter(item => !item.isPinned),\n        filteredNotesList: payload.filter(item => !item.isPinned),\n        pinnedNotesList: payload.filter(item => item.isPinned),\n      };\n    },\n    successAddLoadNote(state: StateNotesType, payload: AddNoteType): StateNotesType {\n      const newId = createNewNoteId(state.notesList)\n      return {\n        ...state,\n        notesList: addNoteArrayMutator(state.notesList, payload, newId, 'NotesList'),\n        filteredNotesList:  addNoteArrayMutator(state.filteredNotesList, payload, newId, 'filteredNotesList'),\n        notPinnedList: addNoteArrayMutator(state.notPinnedList, payload, newId, 'notPinnedList'),\n        pinnedNotesList: addNoteArrayMutator(state.pinnedNotesList, payload, newId, 'pinnedNotesList'),\n      };\n    },\n    successEditNote(state: StateNotesType, payload: NoteType): StateNotesType {\n      return {\n        ...state,\n        notesList: editNoteArrayMutator(state.notesList, payload, 'NotesList'),\n        filteredNotesList: editNoteArrayMutator(state.filteredNotesList, payload, 'filteredNotesList'),\n        notPinnedList: editNoteArrayMutator(state.notPinnedList, payload, 'notPinnedList'),\n        pinnedNotesList: editNoteArrayMutator(state.pinnedNotesList, payload, 'pinnedNotesList')\n      };\n    },\n    successDeleteNote(state: StateNotesType, payload: number): StateNotesType {\n      return {\n        ...state,\n        notesList: deleteNoteArrayMutator(state.notesList, payload),\n        filteredNotesList: deleteNoteArrayMutator(state.filteredNotesList, payload),\n        notPinnedList: deleteNoteArrayMutator(state.notPinnedList, payload),\n        pinnedNotesList: deleteNoteArrayMutator(state.pinnedNotesList, payload),\n      };\n    },\n    successPinNote(state: StateNotesType, payload: number): StateNotesType {\n      const pinnedNoteIndex = state.notesList.findIndex((el) => el.id === payload)\n      return {\n        ...state,\n        pinnedNotesList: [\n          ...state.pinnedNotesList,\n          {\n            ...state.notesList[pinnedNoteIndex],\n            isPinned: true\n          }\n        ],\n        notPinnedList: deleteNoteArrayMutator(state.notPinnedList, payload),\n        filteredNotesList:  deleteNoteArrayMutator(state.filteredNotesList, payload)\n      };\n    },\n    successUnPinNote(state: StateNotesType, payload: number): StateNotesType {\n      const pinnedNoteIndex = state.notesList.findIndex((el) => el.id === payload)\n      return {\n        ...state,\n        pinnedNotesList: deleteNoteArrayMutator(state.pinnedNotesList, payload),\n        notPinnedList: [\n          ...state.notPinnedList,\n          {\n            ...state.notesList[pinnedNoteIndex],\n            isPinned: false\n          }\n        ],\n        filteredNotesList: [\n        ...state.filteredNotesList,\n        {\n          ...state.notesList[pinnedNoteIndex],\n          isPinned: false\n        }\n      ],\n      };\n    },\n    successDeleteTagFromNotes(state: StateNotesType, payload: number): StateNotesType {\n      return {\n        ...state,\n        notesList: deleteTagFromNoteArrayMutator(state.notesList, payload),\n        notPinnedList: deleteTagFromNoteArrayMutator(state.notPinnedList, payload),\n        filteredNotesList: deleteTagFromNoteArrayMutator(state.filteredNotesList, payload),\n        pinnedNotesList: deleteTagFromNoteArrayMutator(state.pinnedNotesList, payload),\n      };\n    },\n    successAddTagToNotes(state: StateNotesType, payload: string): StateNotesType {\n      return {\n        ...state,\n        notesList: addTagToNoteArrayMutator(state.notesList, payload),\n        notPinnedList: addTagToNoteArrayMutator(state.notPinnedList, payload),\n        filteredNotesList: addTagToNoteArrayMutator(state.filteredNotesList, payload),\n        pinnedNotesList: addTagToNoteArrayMutator(state.pinnedNotesList, payload),\n      };\n    },\n    successFilterNotes(state: StateNotesType, payload: NotesFilterType): StateNotesType {\n      return {\n        ...state,\n        filteredNotesList: filterNotesArrayMutator(state.notPinnedList, payload.activeTags, payload.searchQuery),\n      };\n    }\n  },\n  effects: (dispatch) => {\n    const { notes } = dispatch;\n    return {\n      async load() {\n          await delay(500);\n          notes.successLoadNotesList(\n              initialNotesState\n          )\n      },\n      async addNote(payload: AddNoteType) {\n        await delay(300);\n          notes.successAddLoadNote(\n              payload\n          )\n      },\n      async editNote(payload: NoteType) {\n        await delay(300);\n        notes.successEditNote(\n            payload\n        )\n      },\n      async deleteNote(payload: number) {\n        await delay(300);\n        notes.successDeleteNote(\n            payload\n        )\n      },\n      async pinNote(payload: number) {\n        await delay(200);\n        notes.successPinNote(\n            payload\n        )\n      },\n      async unPinNote(payload: number) {\n        await delay(200);\n        notes.successUnPinNote(\n            payload\n        )\n      },\n      async deleteTagFromNotes(payload: number) {\n        await delay(500);\n        notes.successDeleteTagFromNotes(\n            payload\n        )\n      },\n      async addTagToNotes(payload: string) {\n        await delay(500);\n        notes.successAddTagToNotes(\n            payload\n        )\n      },\n      async filterNotes(payload: NotesFilterType) {\n        await delay(700);\n        notes.successFilterNotes(\n            {\n              activeTags: payload.activeTags,\n              searchQuery: payload.searchQuery\n            }\n        )\n      }\n    };\n  }\n});\n","import { createModel } from \"@rematch/core\";\r\nimport { RootModel } from \".\";\r\nimport { ArrayTagsType, StateTagsType } from \"../Types/models/tag\";\r\nimport { changeTagStatus, deleteTagArrayMutator, addTagArrayMutator, delay } from \"../helpers/utils\";\r\nimport { initialTag, initialTags } from \"../helpers/mocks\";\r\n\r\nexport const tags: any = createModel<RootModel>()({\r\n    state: {\r\n        tagsList: initialTag\r\n    },\r\n    reducers: {\r\n        successLoadTagsList(state: StateTagsType, payload: ArrayTagsType): StateTagsType {\r\n            return {\r\n                tagsList: payload\r\n            }\r\n        },\r\n        successChangeTagStatus(state: StateTagsType, payload: number): StateTagsType {\r\n            return {\r\n                ...state,\r\n                tagsList: changeTagStatus(state.tagsList, payload)\r\n            }\r\n        },\r\n        successDeleteTag(state: StateTagsType, payload: number): StateTagsType {\r\n            return {\r\n                ...state,\r\n                tagsList: deleteTagArrayMutator(state.tagsList, payload)\r\n            }\r\n        },\r\n        successAddTag(state: StateTagsType, payload: string): StateTagsType {\r\n            return {\r\n                ...state,\r\n                tagsList: addTagArrayMutator(state.tagsList, payload)\r\n            }\r\n        }\r\n    },\r\n    effects: (dispatch) => {\r\n        const { tags } = dispatch;\r\n        return {\r\n            async load() {\r\n                await delay(500);\r\n                tags.successLoadTagsList(\r\n                    initialTags\r\n                )\r\n            },\r\n            async changeStatus(id: number) {\r\n                await delay(200);\r\n                tags.successChangeTagStatus(\r\n                    id\r\n                )\r\n            },\r\n            async deleteTag(id: number) {\r\n                await delay(200);\r\n                tags.successDeleteTag(\r\n                    id\r\n                )\r\n            },\r\n            async addTag(name: string) {\r\n                await delay(200);\r\n                tags.successAddTag(\r\n                    name\r\n                )\r\n            },\r\n        };\r\n    }\r\n});\r\n","import { init, RematchDispatch, RematchRootState } from \"@rematch/core\";\nimport { models, RootModel } from \"./models\";\n\nexport const store = init({\n  models\n});\n\nexport type Store = typeof store;\nexport type Dispatch = RematchDispatch<RootModel>;\nexport type RootState = RematchRootState<RootModel>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}